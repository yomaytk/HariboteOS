     1                                  ; ; haribote-os boot asm
     2                                  ; ; TAB=4
     3                                  
     4                                  ; BOTPAK	EQU		0x00280000		; bootpackのロード先
     5                                  ; DSKCAC	EQU		0x00100000		; ディスクキャッシュの場所
     6                                  ; DSKCAC0	EQU		0x00008000		; ディスクキャッシュの場所（リアルモード）
     7                                  
     8                                  ; ; BOOT_INFO関係
     9                                  ; CYLS	EQU		0x0ff0			; ブートセクタが設定する
    10                                  ; LEDS	EQU		0x0ff1
    11                                  ; VMODE	EQU		0x0ff2			; 色数に関する情報。何ビットカラーか？
    12                                  ; SCRNX	EQU		0x0ff4			; 解像度のX
    13                                  ; SCRNY	EQU		0x0ff6			; 解像度のY
    14                                  ; VRAM	EQU		0x0ff8			; グラフィックバッファの開始番地
    15                                  
    16                                  ; 		ORG		0xc200			; このプログラムがどこに読み込まれるのか
    17                                  
    18                                  ; ; 画面モードを設定
    19                                  
    20                                  ; 		MOV		AL,0x13			; VGAグラフィックス、320x200x8bitカラー
    21                                  ; 		MOV		AH,0x00
    22                                  ; 		INT		0x10
    23                                  ; 		MOV		BYTE [VMODE],8	; 画面モードをメモする（C言語が参照する）
    24                                  ; 		MOV		WORD [SCRNX],320
    25                                  ; 		MOV		WORD [SCRNY],200
    26                                  ; 		MOV		DWORD [VRAM],0x000a0000
    27                                  
    28                                  ; ; キーボードのLED状態をBIOSに教えてもらう
    29                                  
    30                                  ; 		MOV		AH,0x02
    31                                  ; 		INT		0x16 			; keyboard BIOS
    32                                  ; 		MOV		[LEDS],AL
    33                                  
    34                                  ; ; PICが一切の割り込みを受け付けないようにする
    35                                  ; ;	AT互換機の仕様では、PICの初期化をするなら、
    36                                  ; ;	こいつをCLI前にやっておかないと、たまにハングアップする
    37                                  ; ;	PICの初期化はあとでやる
    38                                  
    39                                  ; 		MOV		AL,0xff
    40                                  ; 		OUT		0x21,AL
    41                                  ; 		NOP						; OUT命令を連続させるとうまくいかない機種があるらしいので
    42                                  ; 		OUT		0xa1,AL
    43                                  
    44                                  ; 		CLI						; さらにCPUレベルでも割り込み禁止
    45                                  
    46                                  ; ; CPUから1MB以上のメモリにアクセスできるように、A20GATEを設定
    47                                  
    48                                  ; 		CALL	waitkbdout
    49                                  ; 		MOV		AL,0xd1
    50                                  ; 		OUT		0x64,AL
    51                                  ; 		CALL	waitkbdout
    52                                  ; 		MOV		AL,0xdf			; enable A20
    53                                  ; 		OUT		0x60,AL
    54                                  ; 		CALL	waitkbdout
    55                                  
    56                                  ; ; プロテクトモード移行
    57                                  
    58                                  ; ;[INSTRSET "i486p"]				; 486の命令まで使いたいという記述
    59                                  
    60                                  ; 		LGDT	[GDTR0]			; 暫定GDTを設定
    61                                  ; 		MOV		EAX,CR0
    62                                  ; 		AND		EAX,0x7fffffff	; bit31を0にする（ページング禁止のため）
    63                                  ; 		OR		EAX,0x00000001	; bit0を1にする（プロテクトモード移行のため）
    64                                  ; 		MOV		CR0,EAX
    65                                  ; 		JMP		pipelineflush
    66                                  ; pipelineflush:
    67                                  ; 		MOV		AX,1*8			;  読み書き可能セグメント32bit
    68                                  ; 		MOV		DS,AX
    69                                  ; 		MOV		ES,AX
    70                                  ; 		MOV		FS,AX
    71                                  ; 		MOV		GS,AX
    72                                  ; 		MOV		SS,AX
    73                                  
    74                                  ; ; bootpackの転送
    75                                  
    76                                  ; 		MOV		ESI,bootpack	; 転送元
    77                                  ; 		MOV		EDI,BOTPAK		; 転送先
    78                                  ; 		MOV		ECX,512*1024/4
    79                                  ; 		CALL	memcpy
    80                                  
    81                                  ; ; ついでにディスクデータも本来の位置へ転送
    82                                  
    83                                  ; ; まずはブートセクタから
    84                                  
    85                                  ; 		MOV		ESI,0x7c00		; 転送元
    86                                  ; 		MOV		EDI,DSKCAC		; 転送先
    87                                  ; 		MOV		ECX,512/4
    88                                  ; 		CALL	memcpy
    89                                  
    90                                  ; ; 残り全部
    91                                  
    92                                  ; 		MOV		ESI,DSKCAC0+512	; 転送元
    93                                  ; 		MOV		EDI,DSKCAC+512	; 転送先
    94                                  ; 		MOV		ECX,0
    95                                  ; 		MOV		CL,BYTE [CYLS]
    96                                  ; 		IMUL	ECX,512*18*2/4	; シリンダ数からバイト数/4に変換
    97                                  ; 		SUB		ECX,512/4		; IPLの分だけ差し引く
    98                                  ; 		CALL	memcpy
    99                                  
   100                                  ; ; asmheadでしなければいけないことは全部し終わったので、
   101                                  ; ;	あとはbootpackに任せる
   102                                  
   103                                  ; ; bootpackの起動
   104                                  
   105                                  ; 		MOV		EBX,BOTPAK
   106                                  ; 		MOV		ECX,[EBX+16]
   107                                  ; 		ADD		ECX,3			; ECX += 3;
   108                                  ; 		SHR		ECX,2			; ECX /= 4;
   109                                  ; 		JZ		skip			; 転送するべきものがない
   110                                  ; 		MOV		ESI,[EBX+20]	; 転送元
   111                                  ; 		ADD		ESI,EBX
   112                                  ; 		MOV		EDI,[EBX+12]	; 転送先
   113                                  ; 		CALL	memcpy
   114                                  ; skip:
   115                                  ; 		MOV		ESP,[EBX+12]	; スタック初期値
   116                                  ; 		JMP		DWORD 2*8:0x0000001b
   117                                  
   118                                  ; waitkbdout:
   119                                  ; 		IN		 AL,0x64
   120                                  ; 		AND		 AL,0x02
   121                                  ; 		JNZ		waitkbdout		; ANDの結果が0でなければwaitkbdoutへ
   122                                  ; 		RET
   123                                  
   124                                  ; memcpy:
   125                                  ; 		MOV		EAX,[ESI]
   126                                  ; 		ADD		ESI,4
   127                                  ; 		MOV		[EDI],EAX
   128                                  ; 		ADD		EDI,4
   129                                  ; 		SUB		ECX,1
   130                                  ; 		JNZ		memcpy			; 引き算した結果が0でなければmemcpyへ
   131                                  ; 		RET
   132                                  ; ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   133                                  
   134                                  ; 		ALIGNB	16
   135                                  ; GDT0:
   136                                  ; 		RESB	8				; ヌルセレクタ
   137                                  ; 		DW		0xffff,0x0000,0x9200,0x00cf	; 読み書き可能セグメント32bit
   138                                  ; 		DW		0xffff,0x0000,0x9a28,0x0047	; 実行可能セグメント32bit（bootpack用）
   139                                  
   140                                  ; 		DW		0
   141                                  ; GDTR0:
   142                                  ; 		DW		8*3-1
   143                                  ; 		DD		GDT0
   144                                  
   145                                  ; 		ALIGNB	16
   146                                  ; bootpack:
   147                                  BOTPAK  EQU    0x00280000    ; BOOTPACK     | bootpackのロード先
   148                                  DSKCAC  EQU    0x00100000    ; DISK CACHE   | ディスクキャッシュの場所
   149                                  DSKCAC0 EQU    0x00008000    ; DISK CACHE 0 | ディスクキャッシュの場所（リアルモード）
   150                                  
   151                                  ; BOOT_INFO関係
   152                                  ; > メモしている場所は0x0ff0番地周辺ですが、メモリマップによるとこのへんも誰にも使われていないようでした
   153                                  CYLS    EQU     0x0ff0      ; ブートセクタが設定する
   154                                  LEDS    EQU     0x0ff1      ; LED STATE
   155                                  VMODE   EQU     0x0ff2      ; VIDEO MODE | 色数に関する情報（何ビットカラーか）
   156                                  SCRNX   EQU     0x0ff4      ; SCREEN X   | 解像度X
   157                                  SCRNY   EQU     0x0ff6      ; SCREEN Y   | 解像度Y
   158                                  VRAM    EQU     0x0ff8      ; VIDEO RAM  | グラフィックバッファの開始番地
   159                                  
   160                                          ;=======================================================================
   161                                          ORG     0xc200      ; 0xc200 = 0x8000 + 0x4200
   162                                                              ; イメージファイルの 0x4200 アドレス番目に書き込まれている
   163                                                              ; また,先で 0x8000 以降を使うことに決めている
   164                                  
   165                                          ;=======================================================================
   166                                          ; [INT(0x10); ビデオ関係](http://oswiki.osask.jp/?%28AT%29BIOS#n5884802)
   167                                          ; ビデオモード設定
   168                                          ;   AH = 0x00;
   169                                          ;   AL = モード： (マイナーな画面モードは省略しています)
   170                                          ;     0x03：16色テキスト、80x25
   171                                          ;     0x12：VGAグラフィックス、640x480x4bitカラー、独自プレーンアクセス
   172                                          ;     0x13：VGAグラフィックス、320x200x8bitカラー、パックドピクセル
   173                                          ;     0x6a：拡張VGAグラフィックス、800x600x4bitカラー、独自プレーンアクセス（ビデオカードによってはサポートされない）
   174                                          ;   戻り値：なし
   175 00000000 B013                            MOV     AL, 0x13    ; VGA graphics, 320x200x(8 bit color)
   176 00000002 B400                            MOV     AH, 0x00
   177 00000004 CD10                            INT     0x10
   178                                  
   179                                          ;=======================================================================
   180                                          ; 画面モードをメモする
   181 00000006 C606F20F08                      MOV     BYTE [VMODE], 8           ; Video MODE
   182 0000000B C706F40F4001                    MOV     WORD [SCRNX], 320         ; SCReeN X
   183 00000011 C706F60FC800                    MOV     WORD [SCRNY], 200         ; SCReeN Y
   184 00000017 66C706F80F00000A00              MOV     DWORD [VRAM], 0x000a0000  ; Video RAM
   185                                                                            ; > VRAMは0xa0000〜0xaffffの64KBです。厳密に言うと、320x200=64000なので、62.5KBですが.
   186                                                                            ;
   187                                                                            ; > [VRAM]に 0xa0000 を入れているのですが、PC の世界で VRAM というのはビデオラムのことで
   188                                                                            ; > 「video RAM」と書き、画面用のメモリのことです。このメモリは、もちろんデータを記憶することがい
   189                                                                            ; > つも通りできます。しかしVRAMは普通のメモリ以上の存在で、それぞれの番地が画面上の画素に対応
   190                                                                            ; > していて、これを利用することで画面に絵を出すことができるのです。
   191                                  
   192                                          ;=======================================================================
   193                                          ; [INT(0x16); キーボード関係 - (AT)BIOS - os-wiki](http://oswiki.osask.jp/?%28AT%29BIOS#lb9f3e72)
   194                                          ; キーロック＆シフト状態取得
   195                                          ;   AH = 0x02;
   196                                          ;   戻り値：
   197                                          ;   AL == 状態コード：
   198                                          ;     bit0：右シフト
   199                                          ;     bit1：左シフト
   200                                          ;     bit2：Ctrl
   201                                          ;     bit3：Alt
   202                                          ;     bit4：Scrollロック
   203                                          ;     bit5：Numロック
   204                                          ;     bit6：Capsロック
   205                                          ;     bit7：Insertモード
   206                                          ; BIOS (16 bit mode) から情報を取得
   207 00000020 B402                            MOV     AH, 0x02    ; キーロック＆シフト状態取得
   208 00000022 CD16                            INT     0x16        ; Keyboard BIOS
   209 00000024 A2F10F                          MOV     [LEDS], AL  ; LED State
   210                                  
   211                                          ; PICが一切の割り込みを受け付けないようにする
   212                                          ; AT互換機の仕様では、PICの初期化をするなら、
   213                                          ; こいつをCLI前にやっておかないと、たまにハングアップする
   214                                          ; PICの初期化はあとでやる
   215                                  
   216 00000027 B0FF                            MOV     AL, 0xff
   217 00000029 E621                            OUT     0x21, AL
   218 0000002B 90                              NOP                   ; OUT命令を連続させるとうまくいかない機種があるらしいので
   219 0000002C E6A1                            OUT     0xa1, AL
   220                                  
   221 0000002E FA                              CLI                   ; さらにCPUレベルでも割り込み禁止
   222                                  
   223                                          ; CPUから1MB以上のメモリにアクセスできるように、A20GATEを設定
   224                                  
   225 0000002F E8B500                          CALL waitkbdout
   226 00000032 B0D1                            MOV  AL,0xd1
   227 00000034 E664                            OUT  0x64,AL
   228 00000036 E8AE00                          CALL waitkbdout
   229 00000039 B0DF                            MOV  AL,0xdf          ; enable A20
   230 0000003B E660                            OUT  0x60,AL
   231 0000003D E8A700                          CALL waitkbdout
   232                                  
   233                                          ; プロテクトモード移行
   234                                          
   235                                          ;[INSTRSET "i486p"]    ; i486の命令まで使いたいという記述
   236                                          ; ここで指定するのではなくgccでcompileする際にi486で指定
   237                                  
   238 00000040 0F0116[2A01]                    LGDT [GDTR0]   ; 暫定GDTを設定
   239 00000045 0F20C0                          MOV  EAX,CR0
   240 00000048 6625FFFFFF7F                    AND  EAX,0x7fffffff ; bit31を0にする（ページング禁止のため）
   241 0000004E 6683C801                        OR  EAX,0x00000001 ; bit0を1にする（プロテクトモード移行のため）
   242 00000052 0F22C0                          MOV  CR0,EAX
   243 00000055 EB00                            JMP  pipelineflush
   244                                  pipelineflush:
   245 00000057 B80800                          MOV  AX,1*8   ;  読み書き可能セグメント32bit
   246 0000005A 8ED8                            MOV  DS,AX
   247 0000005C 8EC0                            MOV  ES,AX
   248 0000005E 8EE0                            MOV  FS,AX
   249 00000060 8EE8                            MOV  GS,AX
   250 00000062 8ED0                            MOV  SS,AX
   251                                  
   252                                          ; bootpackの転送
   253                                  
   254 00000064 66BE[30010000]                  MOV  ESI,bootpack ; 転送元
   255 0000006A 66BF00002800                    MOV  EDI,BOTPAK  ; 転送先
   256 00000070 66B900000200                    MOV  ECX,512*1024/4
   257                                          ;MOV  ECX, 131072
   258 00000076 E87500                          CALL memcpy
   259                                  
   260                                          ; ついでにディスクデータも本来の位置へ転送
   261                                  
   262                                          ; まずはブートセクタから
   263                                  
   264 00000079 66BE007C0000                    MOV  ESI,0x7c00  ; 転送元
   265 0000007F 66BF00001000                    MOV  EDI,DSKCAC  ; 転送先
   266 00000085 66B980000000                    MOV  ECX,512/4
   267                                          ;MOV  ECX, 128
   268 0000008B E86000                          CALL memcpy
   269                                  
   270                                          ; 残り全部
   271                                  
   272 0000008E 66BE00820000                    MOV  ESI,DSKCAC0+512 ; 転送元
   273 00000094 66BF00021000                    MOV  EDI,DSKCAC+512 ; 転送先
   274 0000009A 66B900000000                    MOV  ECX,0
   275 000000A0 8A0EF00F                        MOV  CL,BYTE [CYLS]
   276 000000A4 6669C900120000                  IMUL ECX,512*18*2/4 ; シリンダ数からバイト数/4に変換
   277                                          ;IMUL ECX, 4608
   278 000000AB 6681E980000000                  SUB  ECX,512/4  ; IPLの分だけ差し引く
   279                                          ;SUB  ECX, 128  ; IPLの分だけ差し引く
   280 000000B2 E83900                          CALL memcpy
   281                                  
   282                                          ; asmheadでしなければいけないことは全部し終わったので、
   283                                          ; あとはbootpackに任せる
   284                                          
   285                                          ; bootpackの起動
   286                                  
   287 000000B5 66BB00002800                    MOV  EBX,BOTPAK
   288 000000BB 66678B4B10                      MOV  ECX,[EBX+16]
   289 000000C0 6683C103                        ADD  ECX,3   ; ECX += 3;
   290 000000C4 66C1E902                        SHR  ECX,2   ; ECX /= 4;
   291 000000C8 7410                            JZ  skip   ; 転送するべきものがない
   292 000000CA 66678B7314                      MOV  ESI,[EBX+20] ; 転送元
   293 000000CF 6601DE                          ADD  ESI,EBX
   294 000000D2 66678B7B0C                      MOV  EDI,[EBX+12] ; 転送先
   295 000000D7 E81400                          CALL memcpy
   296                                  skip:
   297 000000DA 66678B630C                      MOV  ESP,[EBX+12] ; スタック初期値
   298 000000DF 66EA1B0000001000                JMP  DWORD 2*8:0x0000001b
   299                                  
   300                                  waitkbdout:
   301 000000E7 E464                            IN   AL,0x64
   302 000000E9 2402                            AND   AL,0x02
   303 000000EB 75FA                            JNZ  waitkbdout  ; ANDの結果が0でなければwaitkbdoutへ
   304 000000ED C3                              RET
   305                                  
   306                                  memcpy:
   307 000000EE 66678B06                        MOV  EAX,[ESI]
   308 000000F2 6683C604                        ADD  ESI,4
   309 000000F6 66678907                        MOV  [EDI],EAX
   310 000000FA 6683C704                        ADD  EDI,4
   311 000000FE 6683E901                        SUB  ECX,1
   312 00000102 75EA                            JNZ  memcpy   ; 引き算した結果が0でなければmemcpyへ
   313 00000104 C3                              RET
   314                                          ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   315                                  
   316 00000105 <res 0000000B>                  ALIGNB 16
   316          ******************       warning: uninitialized space declared in .text section: zeroing
   317                                  GDT0:
   318 00000110 <res 00000008>                  RESB 8    ; ヌルセレクタ
   318          ******************       warning: uninitialized space declared in .text section: zeroing
   319 00000118 FFFF00000092CF00                DW  0xffff,0x0000,0x9200,0x00cf ; 読み書き可能セグメント32bit
   320 00000120 FFFF0000289A4700                DW  0xffff,0x0000,0x9a28,0x0047 ; 実行可能セグメント32bit（bootpack用）
   321                                  
   322 00000128 0000                            DW  0
   323                                  GDTR0:
   324 0000012A 1700                            DW  8*3-1
   325 0000012C [10010000]                      DD  GDT0
   326                                  
   327                                          ALIGNB 16
   328                                  bootpack:
   329                                  
